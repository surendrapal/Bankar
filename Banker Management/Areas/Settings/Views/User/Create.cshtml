@model BM.Models.User
@{
    ViewBag.Title = "Create User";
}
<h3>Create User</h3>
<div class="row-fluid">

    @using (Html.BeginForm("Create", "User", new { area = "Settings" }, FormMethod.Post, new { @class = "form-horizontal no-margin" }))
    {
        <div class="control-group">
            <div class="controls controls-row">
                @Html.ValidationSummary(false)
            </div>
        </div>
        <div class="row-fluid">
            <div class="control-group span6">
                @Html.LabelFor(model => model.UserName, new { @class = "control-label" })
                <div class="controls controls-row">
                    @Html.TextBoxFor(model => model.UserName, new { @class = "span12", placeholder = "Name" })
                </div>
            </div>
            <div class="control-group span6">
                @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                <div class="controls controls-row">
                    @Html.TextBoxFor(model => model.Email, new { @class = "span12", placeholder = "Email" })
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="control-group span6">
                @Html.LabelFor(model => model.PasswordHash, new { @class = "control-label" })
                <div class="controls controls-row">
                    @Html.PasswordFor(model => model.PasswordHash, new { @class = "span12", placeholder = "Password" })
                </div>
            </div>
            <div class="control-group span6">
                @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                <div class="controls controls-row">
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "span12", placeholder = "First Name" })
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="control-group span6">
                @Html.Label("ConfirmPassword", new { @class = "control-label" })
                <div class="controls controls-row">
                    <input type="password" placeholder="Confirm Password" name="ConfirmPassword" id="ConfirmPassword" data-val-required="Password is required." data-val="true" data-val-equalto-other="*.PasswordHash" class="span12">
                </div>
            </div>
            <div class="control-group span6">
                @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                <div class="controls controls-row">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "span12", placeholder = "Last Name" })
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="control-group span6">
                @Html.LabelFor(model => model.Companies, new { @class = "control-label" })
                <div class="controls controls-row">
                    @{ List<SelectListItem> Companies = ViewBag.AssignedCompanies;
                     foreach (var company in Companies)
                     {
                        <label class="checkbox inline">
                            <input type="checkbox"
                                   name="selectedCompanies" checked="@company.Selected" value="@company.Value">
                            @company.Text
                        </label>
                     }
                    }
                </div>
            </div>
        </div>
        <div class="form-actions no-margin">
            <button class="btn btn-info " type="submit">
                Save
            </button>

            <a class="btn btn-info" role="button" href="@Url.Action("Index", "User")">
                Back
            </a>
            <div class="clearfix">
            </div>
        </div>
        @Html.AntiForgeryToken()
    }
</div>
@section scripts{
    <script type="text/javascript">

        function onSelected($e, datum) {
            $('#ParentId').val(datum["Id"]);
        }
        $(document).ready(function () {
            var countries = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                limit: 10,
                remote: {

                    url: '/Settings/Location/LookupCity?id=%QUERY',
                    ajax: {
                        type: 'POST'
                    }
                }
            });
            countries.initialize();
            $('#ParentName').typeahead(null, {
                name: 'countries',
                displayKey: 'Name',
                source: countries.ttAdapter(),
                templates: {
                    empty: [
                    '<div class="empty-message">',
                    'unable to find any  qmatch the current query',
                    '</div>'
                    ].join('\n'),
                    //suggestion: Handlebars.compile('<p><strong>{{value}}</strong> – {{year}}</p>')
                }
            }).on('typeahead:selected', onSelected);
        });
    </script>
}
@*<div class="contentWrapper">
        <div class="full-page-form  formdetails">
            @ViewBag.Message
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <div class="editor-field">
                    @Html.LabelFor(model => modelName)
                    @Html.EditorFor(model => modelName)
                    @Html.ValidationMessageFor(model => modelName, "", new { id = "username-message" })
                </div>
                <div class="editor-field">
                    @Html.LabelFor(model => model.Email)
                    @Html.EditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                <div class="clear"></div>
                <div class="editor-field">
                    @Html.LabelFor(model => model.PasswordHash)
                    @Html.EditorFor(model => model.PasswordHash)
                    @Html.ValidationMessageFor(model => model.PasswordHash)
                </div>
                <div class="editor-field">
                    @Html.LabelFor(model => model.PasswordHash)
                    @Html.EditorFor(model => model.PasswordHash)
                    @Html.ValidationMessageFor(model => model.PasswordHash)
                </div>
                <div class="clear"></div>
                  <div class="editor-field">
                    @Html.LabelFor(model => model.FirstName)
                    @Html.EditorFor(model => model.FirstName)
                </div>

                <div class="editor-field">
                    @Html.LabelFor(model => model.LastName)
                    @Html.EditorFor(model => model.LastName)
                </div>
                <div class="clear"></div>
                <div class="editor-field">
                    @Html.LabelFor(model => model.Companies)
                <table style="width: 100%">
                    <tr>
                        @{
                int cnt = 0;
                List<BM.Models.Company> Companies = ViewBag.AssignedCompanies;
                foreach (var company in Companies)
                {
                    if (cnt++ % 6 == 0)
                    {
                                        @:  </tr> <tr>
                                        }
                                        @: <td>
                                            <input type="checkbox"
                                                   name="selectedSpecialty"
                                                   value="@company.CompanyId" />
                                            @company.Name
                                        @:</td>
                                    }
                                    @: </tr>
                        }
                </table>
            </div>
                <div class="clear"></div>
                <p>
                    <input type="submit" class="submit" value="Add" />
                    @Html.ActionLink("Back", "Index", null, new { @class = "submit" })
                </p>
            }

        </div>
    </div>
    <script type="text/javascript">
        $(function () {
            var msg = $("#username-message");
            var btn = $("input[type='submit']");
            var userNameText = $("#UserProfile_UserName");
            //   userNameText.focus();

            $("#Password_NewPassword").blur(function () {
                $("#Password_OldPassword").val(this.val());
            });
            $("#UserProfile_UserName").blur(function () {
                var username = $(this).val();
                if (username.length == 0) {
                    // alert("No username.");
                    return;
                }
                $.ajax({
                    url: '@Url.Action("CheckForUniqueUser", "User")',
                    dataType: 'json',
                    type: 'GET',
                    data: { userName: username },
                    success: OnCheckForUniqueUserSuccess,
                    error: OnCheckForUniqueUserError
                });
            });

            function OnCheckForUniqueUserSuccess(data) {
                if (data.Exists) {
                    msg.text("This username already exists.");
                    msg.addClass("input-validation-error field-validation-error");
                    msg.removeClass("field-validation-valid input-validation-valid");
                    userNameText.addClass("input-validation-error");
                    btn.attr("disabled", "disabled");
                } else {
                    msg.text("");
                    btn.removeAttr("disabled");
                }
            }
            function OnCheckForUniqueUserError(xhr, status, error) {
                msg.text("There was an error checking uniqueness.");
            }
        });

        $(function () {
            $("#CityName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/admin/location/LookupCity", type: "POST", dataType: "json",
                        data: { id: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.Name, value: item.Name, id: item.Id }
                            }))
                        }
                    })
                },
                select: function (event, ui) {
                    document.getElementById("UserProfile_CityId").value = ui.item.id;

                }
            })
        });
        $(document).ready(function () {

            var btn = $("input[type='submit']");
            $('input', 'form').blur(function () {
                $(this).valid();
                if ($(this).attr('id') == "CityName") {
                    if ($(this).val() == '') {
                        $(this).addClass("input-validation-error");
                        btn.attr("disabled", "disabled");
                        //alert('');
                    }
                    else {
                        btn.removeAttr("disabled");
                        $(this).removeClass("input-validation-error");
                    }
                }
            });
        });
    </script>*@
